/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Generated by:
//
// operator-sdk create webhook --group cinder --version v1beta1 --kind Cinder --programmatic-validation --defaulting
//

package v1beta1

import (
	"fmt"

	"golang.org/x/exp/maps"

	"github.com/openstack-k8s-operators/lib-common/modules/common/service"
	"github.com/openstack-k8s-operators/lib-common/modules/common/util"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation/field"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"

	common_webhook "github.com/openstack-k8s-operators/lib-common/modules/common/webhook"
)

// CinderDefaults -
type CinderDefaults struct {
	APIContainerImageURL       string
	BackupContainerImageURL    string
	SchedulerContainerImageURL string
	VolumeContainerImageURL    string
	DBPurgeAge                 int
	DBPurgeSchedule            string
	APITimeout                 int
}

var cinderDefaults CinderDefaults

// log is for logging in this package.
var cinderlog = logf.Log.WithName("cinder-resource")

// SetupDefaults - initialize Cinder spec defaults for use with either internal or external webhooks
func SetupDefaults() {
	cinderDefaults = CinderDefaults{
		APIContainerImageURL:       util.GetEnvVar("RELATED_IMAGE_CINDER_API_IMAGE_URL_DEFAULT", CinderAPIContainerImage),
		BackupContainerImageURL:    util.GetEnvVar("RELATED_IMAGE_CINDER_BACKUP_IMAGE_URL_DEFAULT", CinderBackupContainerImage),
		SchedulerContainerImageURL: util.GetEnvVar("RELATED_IMAGE_CINDER_SCHEDULER_IMAGE_URL_DEFAULT", CinderSchedulerContainerImage),
		VolumeContainerImageURL:    util.GetEnvVar("RELATED_IMAGE_CINDER_VOLUME_IMAGE_URL_DEFAULT", CinderVolumeContainerImage),
		DBPurgeAge:                 DBPurgeDefaultAge,
		DBPurgeSchedule:            DBPurgeDefaultSchedule,
		APITimeout:                 APITimeoutDefault,
	}

	cinderlog.Info("Cinder defaults initialized", "defaults", cinderDefaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Cinder) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-cinder-openstack-org-v1beta1-cinder,mutating=true,failurePolicy=fail,sideEffects=None,groups=cinder.openstack.org,resources=cinders,verbs=create;update,versions=v1beta1,name=mcinder.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Cinder{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Cinder) Default() {
	cinderlog.Info("default", "name", r.Name)

	if r.Spec.CinderAPI.ContainerImage == "" {
		r.Spec.CinderAPI.ContainerImage = cinderDefaults.APIContainerImageURL
	}

	if r.Spec.CinderBackup.ContainerImage == "" {
		r.Spec.CinderBackup.ContainerImage = cinderDefaults.BackupContainerImageURL
	}

	if r.Spec.CinderScheduler.ContainerImage == "" {
		r.Spec.CinderScheduler.ContainerImage = cinderDefaults.SchedulerContainerImageURL
	}

	for index, cinderVolume := range r.Spec.CinderVolumes {
		if cinderVolume.ContainerImage == "" {
			cinderVolume.ContainerImage = cinderDefaults.VolumeContainerImageURL
		}
		// This is required, as the loop variable is a by-value copy
		r.Spec.CinderVolumes[index] = cinderVolume
	}
	r.Spec.CinderSpecBase.Default()
}

// Default - set defaults for this Cinder spec
func (spec *CinderSpecBase) Default() {

	if spec.DBPurge.Age == 0 {
		spec.DBPurge.Age = cinderDefaults.DBPurgeAge
	}
	if spec.DBPurge.Schedule == "" {
		spec.DBPurge.Schedule = cinderDefaults.DBPurgeSchedule
	}
	if spec.APITimeout == 0 {
		spec.APITimeout = cinderDefaults.APITimeout
	}
}

// Default - set defaults for this Cinder spec
func (spec *CinderSpecCore) Default() {
	spec.CinderSpecBase.Default()
}

// TODO(user): change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-cinder-openstack-org-v1beta1-cinder,mutating=false,failurePolicy=fail,sideEffects=None,groups=cinder.openstack.org,resources=cinders,verbs=create;update,versions=v1beta1,name=vcinder.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Cinder{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Cinder) ValidateCreate() (admission.Warnings, error) {
	cinderlog.Info("validate create", "name", r.Name)

	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	// Validate cinderVolume name is valid
	// CinderVolume name is <cinder name>-volume-<volume name>
	// The CinderVolume controller creates StatefulSet for volume service to run.
	// This adds a StatefulSet pod's label
	// "controller-revision-hash": "<statefulset_name>-<hash>"
	// to the pod.
	// The kubernetes label is restricted under 63 char and the revision
	// hash is an int32, 10 chars + the hyphen. Which results in a default
	// statefulset max len of 52 chars. The statefulset name also
	// contain the cinder name and -volume-. So the
	// max len also need to be reduced bye the length of those.
	err := common_webhook.ValidateDNS1123Label(
		basePath.Child("cinderVolumes"),
		maps.Keys(r.Spec.CinderVolumes),
		GetCrMaxLengthCorrection(r.Name)) // omit issue with statefulset pod label "controller-revision-hash": "<statefulset_name>-<hash>"
	allErrs = append(allErrs, err...)

	if err := r.Spec.ValidateCreate(basePath); err != nil {
		allErrs = append(allErrs, err...)
	}

	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "cinder.openstack.org", Kind: "Cinder"},
			r.Name, allErrs)
	}

	return nil, nil
}

// ValidateCreate - Exported function wrapping non-exported validate functions,
// this function can be called externally to validate an cinder spec.
func (r *CinderSpec) ValidateCreate(basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("cinderAPI").Child("override").Child("service"),
		r.CinderAPI.Override.Service)...)

	return allErrs
}

func (r *CinderSpecCore) ValidateCreate(basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("cinderAPI").Child("override").Child("service"),
		r.CinderAPI.Override.Service)...)

	return allErrs
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Cinder) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	cinderlog.Info("validate update", "name", r.Name)

	oldCinder, ok := old.(*Cinder)
	if !ok || oldCinder == nil {
		return nil, apierrors.NewInternalError(fmt.Errorf("unable to convert existing object"))
	}

	var allErrs field.ErrorList
	basePath := field.NewPath("spec")

	// Validate cinderVolume name is valid
	// CinderVolume name is <cinder name>-volume-<volume name>
	// The CinderVolume controller creates StatefulSet for volume service to run.
	// This adds a StatefulSet pod's label
	// "controller-revision-hash": "<statefulset_name>-<hash>"
	// to the pod.
	// The kubernetes label is restricted under 63 char and the revision
	// hash is an int32, 10 chars + the hyphen. Which results in a default
	// statefulset max len of 52 chars. The statefulset name also
	// contain the cinder name and -volume-. So the
	// max len also need to be reduced bye the length of those.
	err := common_webhook.ValidateDNS1123Label(
		basePath.Child("cinderVolumes"),
		maps.Keys(r.Spec.CinderVolumes),
		GetCrMaxLengthCorrection(r.Name)) // omit issue with statefulset pod label "controller-revision-hash": "<statefulset_name>-<hash>"
	allErrs = append(allErrs, err...)

	if err := r.Spec.ValidateUpdate(oldCinder.Spec, basePath); err != nil {
		allErrs = append(allErrs, err...)
	}

	if len(allErrs) != 0 {
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "cinder.openstack.org", Kind: "Cinder"},
			r.Name, allErrs)
	}

	return nil, nil
}

// ValidateUpdate - Exported function wrapping non-exported validate functions,
// this function can be called externally to validate an cinder spec.
func (r *CinderSpec) ValidateUpdate(old CinderSpec, basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("cinderAPI").Child("override").Child("service"),
		r.CinderAPI.Override.Service)...)

	return allErrs
}

func (r *CinderSpecCore) ValidateUpdate(old CinderSpecCore, basePath *field.Path) field.ErrorList {
	var allErrs field.ErrorList

	// validate the service override key is valid
	allErrs = append(allErrs, service.ValidateRoutedOverrides(
		basePath.Child("cinderAPI").Child("override").Child("service"),
		r.CinderAPI.Override.Service)...)

	return allErrs
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Cinder) ValidateDelete() (admission.Warnings, error) {
	cinderlog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}

// SetDefaultRouteAnnotations sets HAProxy timeout values of the route
func (spec *CinderSpecCore) SetDefaultRouteAnnotations(annotations map[string]string) {
	const haProxyAnno = "haproxy.router.openshift.io/timeout"
	// Use a custom annotation to flag when the operator has set the default HAProxy timeout
	// With the annotation func determines when to overwrite existing HAProxy timeout with the APITimeout
	const cinderAnno = "api.cinder.openstack.org/timeout"

	valCinder, okCinder := annotations[cinderAnno]
	valHAProxy, okHAProxy := annotations[haProxyAnno]

	// Human operator set the HAProxy timeout manually
	if !okCinder && okHAProxy {
		return
	}

	// Human operator modified the HAProxy timeout manually without removing the Cinder flag
	if okCinder && okHAProxy && valCinder != valHAProxy {
		delete(annotations, cinderAnno)
		return
	}

	timeout := fmt.Sprintf("%ds", spec.APITimeout)
	annotations[cinderAnno] = timeout
	annotations[haProxyAnno] = timeout
}

// GetCrMaxLengthCorrection - get correction for ValidateDNS1123Label to get the real max string len of the cinder volume key
func GetCrMaxLengthCorrection(name string) int {
	// defaultCrMaxLengthCorrection - DNS1123LabelMaxLength (63) - CrMaxLengthCorrection used in validation to
	// omit issue with statefulset pod label "controller-revision-hash": "<statefulset_name>-<hash>"
	// Int32 is a 10 character + hyphen = 11
	defaultCrMaxLengthCorrection := 11

	// cinder volume name is <cinder name>-volume-<volume name> with this
	// crMaxLengthCorrection = defaultCrMaxLengthCorrection + len(<cinder name>) + "-volume-"

	return (defaultCrMaxLengthCorrection + len(name) + 8)
}
